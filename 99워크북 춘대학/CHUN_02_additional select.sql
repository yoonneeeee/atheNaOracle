-- CHUN 02. Additional Select - 함수
-- YOON : 13,14,15

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_08PAGE
-- 2.01. 영어영문학과(학과코드 002) 학생들의 학번과 이름, 입학 년도를 
-- 입학 년도가 빠른 순으로 표시하는 SQL 문장을 작성하시오.
-- ( 단, 헤더는 "학번", "이름", "입학년도" 가 표시되도록 한다.)
--------------------------------------------------------------------------------
SELECT 
    STUDENT_NO "학번"
    , STUDENT_NAME 이름
    , ENTRANCE_DATE AS 입학년도
FROM TB_STUDENT
ORDER BY 3 ASC;

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_08PAGE
-- 2.02. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 한 명 있다고 한다. 
-- 그 교수의 이름과 주민번호를 화면에 출력하는 SQL 문장을 작성해 보자. 
-- (* 이때 올바르게 작성한 SQL문장의 결과 값이 예상과 다르게 나올 수 있다. 
-- 원인이 무엇일지 생각해볼 것)
--------------------------------------------------------------------------------
SELECT
PROFESSOR_NAME 
, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_08PAGE
-- 2.03. 춘 기술대학교의 남자 교수들의 이름과 나이를 출력하는 SQL 문장을 작성하시오. 
-- 단, 이때 나이가 적은 사람에서 많은 사람 순서로 화면에 출력되도록 만드시오. 
-- (단, 교수 중 2000 년 이후 출생자는 없으며 출력 헤더는 "교수이름", "나이"로 한다. 
-- 나이는 ‘만’으로 계산한다.)
--------------------------------------------------------------------------------
SELECT 
    PROFESSOR_NAME 교수이름
    , FLOOR((SYSDATE-TO_DATE(19||SUBSTR(PROFESSOR_SSN,1,6)))/365) 나이
FROM TB_PROFESSOR
WHERE PROFESSOR_SSN LIKE '%-1%'
ORDER BY 2 ASC;

--------------------------------------------------------------------------------
--[SUBSTR] 문자형함수 substr(문자열, 시작위치, 길이)
SELECT SUBSTR('880923-2******',1,6) FROM DUAL; -- 880923
SELECT SUBSTR('안녕하세요ABC', 6) FROM DUAL; -- ABC : 앞에서부터 여섯번째로부터 마지막까지
SELECT SUBSTR('안녕하세요ABC', 4,3.7) FROM DUAL; -- 세요A : 앞에서부터 네번째로부터 3개
SELECT SUBSTR('안녕하세요ABC', 4,3.2) FROM DUAL; -- 세요A : 앞에서부터 네번째로부터 3개
SELECT SUBSTR('안녕하세요ABC', -4,2) FROM DUAL; -- 요A : 뒤에서부터 네번째로부터 두개
SELECT SUBSTR('안녕하세요ABC', -4) FROM DUAL; -- 요ABC : 뒤에서부터 네번째로부터 마지막까지
--------------------------------------------------------------------------------
--[TO_DATE] String 타입의 날짜를 날짜 타입으로 데이터 유형을 바꾸어줌


--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_09PAGE
-- 2.04. 교수들의 이름 중 성을 제외한 이름만 출력하는 SQL 문장을 작성하시오. 
-- 출력 헤더는‚ 이름‛ 이 찍히도록 핚다. (성이 2 자인 경우는 교수는 없다고 가정하시오)
--------------------------------------------------------------------------------
SELECT
SUBSTR(PROFESSOR_NAME,2) 이름
FROM TB_PROFESSOR;

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_09PAGE
-- 2.05. 춘 기술대학교의 재수생 입학자를 구하려고 한다. 어떻게 찾아낼 것인가? 
-- 이때, 19 살에 입학하면 재수를 하지 않은 것으로 간주핚다.
--------------------------------------------------------------------------------
SELECT 
STUDENT_NAME 이름
--, 19||SUBSTR(STUDENT_SSN,1,2)||'년생' 나이
--, EXTRACT(YEAR FROM ENTRANCE_DATE) 입학년도
FROM TB_STUDENT
WHERE 
EXTRACT(YEAR FROM ENTRANCE_DATE) - (19||SUBSTR(STUDENT_SSN,1,2)) > 19;
--------------------------------------------------------------------------------
--[날짜관련 함수] (조회날짜 : 2024.06.23)
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL; -- 2024
SELECT EXTRACT(MONTH FROM SYSDATE) FROM DUAL;  -- 6
SELECT EXTRACT(DAY FROM SYSDATE) FROM DUAL;  --23
SELECT 
    TO_CHAR(SYSDATE, 'yyyy-mm-dd') 날짜  -- 2024-06-23
    , TO_CHAR(SYSDATE, 'yy,mm,dd') 날짜  -- 24,06,23
    , TO_CHAR(SYSDATE, 'dy')       요일1 -- 일
    , TO_CHAR(SYSDATE, 'day')      요일2 -- 일요일
FROM DUAL;

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_09PAGE
-- 2.06. 2020 년 크리스마스는 무슨 요일인가?
SELECT TO_CHAR(TO_DATE(20201225, 'YYYY-MM-DD'), 'DY') FROM DUAL;
--------------------------------------------------------------------------------
--[날짜관련 함수] (조회날짜 : 2024.06.23)
SELECT 
    TO_CHAR(SYSDATE, 'yyyy-mm-dd') 날짜  -- 2024-06-23
    , TO_CHAR(SYSDATE, 'yy,mm,dd') 날짜  -- 24,06,23
    , TO_CHAR(SYSDATE, 'dy')       요일1 -- 일
    , TO_CHAR(SYSDATE, 'day')      요일2 -- 일요일
FROM DUAL;


--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_09PAGE
-- 2.07. TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 은 
-- 각각 몇 년 몇 월 몇 일을 의미할까? 또 TO_DATE('99/10/11','RR/MM/DD'),
-- TO_DATE('49/10/11','RR/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미할까?
--------------------------------------------------------------------------------
-- [TO_DATE('99/10/11','YY/MM/DD')] -- 2099년 10월 11일
SELECT 
    EXTRACT(YEAR FROM(TO_DATE('99/10/11','YY/MM/DD')))||'년' 
    || EXTRACT(MONTH FROM(TO_DATE('99/10/11','YY/MM/DD')))||'월'
    || EXTRACT(DAY FROM(TO_DATE('99/10/11','YY/MM/DD')))||'일' "날짜"
FROM DUAL;

-- [TO_DATE('49/10/11','YY/MM/DD')] -- 2049년 10월 11일
SELECT 
    EXTRACT(YEAR FROM(TO_DATE('49/10/11','YY/MM/DD')))||'년' 
    || EXTRACT(MONTH FROM(TO_DATE('49/10/11','YY/MM/DD')))||'월'
    || EXTRACT(DAY FROM(TO_DATE('49/10/11','YY/MM/DD')))||'일' "날짜"
FROM DUAL;

-- [TO_DATE('99/10/11','RR/MM/DD')]  -- 1999년 10월 11일
SELECT 
    EXTRACT(YEAR FROM(TO_DATE('99/10/11','RR/MM/DD')))||'년' 
    || EXTRACT(MONTH FROM(TO_DATE('99/10/11','RR/MM/DD')))||'월'
    || EXTRACT(DAY FROM(TO_DATE('99/10/11','RR/MM/DD')))||'일' "날짜"
FROM DUAL;

-- TO_DATE('49/10/11','RR/MM/DD') -- 2049년 10월 11일
SELECT 
    EXTRACT(YEAR FROM(TO_DATE('49/10/11','RR/MM/DD')))||'년' 
    || EXTRACT(MONTH FROM(TO_DATE('49/10/11','RR/MM/DD')))||'월'
    || EXTRACT(DAY FROM(TO_DATE('49/10/11','RR/MM/DD')))||'일' "날짜"
FROM DUAL;

-- TO_DATE('59/10/11','RR/MM/DD') -- 1959년 10월 11일
SELECT 
    EXTRACT(YEAR FROM(TO_DATE('59/10/11','RR/MM/DD')))||'년' 
    || EXTRACT(MONTH FROM(TO_DATE('59/10/11','RR/MM/DD')))||'월'
    || EXTRACT(DAY FROM(TO_DATE('59/10/11','RR/MM/DD')))||'일' "날짜"
FROM DUAL;
--------------------------------------------------------------------------------
-- YY는 무조건 2000년대를 반환하고
-- RR은 50년 미만이면 2000년대, 이상이면 1900년대를 반환한다. 


--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_10PAGE
-- 2.08. 춘기술대학교의 2000년도 이후 입학자들은 학번이 A로 시작하게 되어있다.
-- 2000년도 이전 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
--------------------------------------------------------------------------------
SELECT
    STUDENT_NAME
    , STUDENT_NO
FROM TB_STUDENT
WHERE STUDENT_NO NOT LIKE 'A%';

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_11PAGE
-- 2.09. 학번이 A517178인 한아름 학생의 학점 총 평점을 구하는 SQL문을 작성하시오.
-- 단, 이때 출력화면의 헤더는 평점 이라고 찍히게 하고, 점수는 반올림하여 소수점
-- 이하 한자리까지만 표시한다. 
--------------------------------------------------------------------------------
SELECT 
    ROUND(AVG(POINT),1) 평점
FROM TB_GRADE
WHERE STUDENT_NO IN ('A517178');

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_10PAGE
-- 2.10. 학과별 학생수를 구하여 "학과번호", "학생수(명)" 의 형태로 헤더를 만들어
-- 결과값이 출력되도록 하시오.
--------------------------------------------------------------------------------
SELECT
DEPARTMENT_NO 학과번호
, COUNT(*) 학생수
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO -- ~별 학생수 => GROUP BY
ORDER BY 1 ASC;

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_11PAGE
-- 2.11. 지도 교수를 배정받지 못한 학생의 수는 몇 명 정도 되는 지 알아내는 SQL문을 작성하시오.
--------------------------------------------------------------------------------
SELECT 
    COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_11PAGE
-- 2.12. 학번이 A112113인 김고운 학생의 년도 별 평점을 구하는 SQL문을 작성하시오. 
-- 단, 이때 출력화면의 헤더에는 "년도", "년도 별 평점"이라고 찍히게 하고, 
-- 점수는 반올림하여 소수점 이하 한자리까지만 표시한다. 
--------------------------------------------------------------------------------
SELECT
    SUBSTR(TERM_NO, 1,4) 년도
    , ROUND(AVG(POINT),1) "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO IN ('A112113')
GROUP BY SUBSTR(TERM_NO, 1,4)
ORDER BY 1 ASC;
-- 그룹화 하기 이전에 김고운 학생을 선정함..
-- 따라서, 그룹화하기 이전에 WHERE을 사용해서 먼저 선별

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_11AGE
-- 2.13. 학과 별 휴학생 수를 파악하고자 한다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을 작성하시오.
--------------------------------------------------------------------------------
SELECT
    DEPARTMENT_NO "학과코드명"
    , COUNT(*) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO, ABSENCE_YN
HAVING ABSENCE_YN LIKE 'Y';
--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_12PAGE
-- 2.14. 춘 대학교에 다니는 동명이인(同名異人) 학생들의 이름을 찾고자 한다. 
-- 어떤 SQL 문장을 사용하면 가능하겠는가?
--------------------------------------------------------------------------------
SELECT 
    STUDENT_NAME "동일이름",
    COUNT(*) "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
--HAVING COUNT(*) !=1;
HAVING COUNT(*) NOT LIKE ('1');

--------------------------------------------------------------------------------
-- WORKBOOK V.2.0_12PAGE
-- 2.15. 학번이 A112113 인 김고운 학생의 
--      년도, 학기 별 평점과 년도 별 누적 평점, 총 평점을 구하는 
--      SQL 문을 작성하시오. 
--      (단, 평점은 소수점 1 자리까지만 반올림하여 표시한다.)
--------------------------------------------------------------------------------
SELECT 
    NVL(SUBSTR(TERM_NO, 1, 4), ' ') "년도", 
    NVL(SUBSTR(TERM_NO, 5, 2), ' ') "학기",
    ROUND(AVG(POINT), 1) "평점" 
FROM TB_GRADE 
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP (SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5,2));

-- [TIP] -- 